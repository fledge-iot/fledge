#!/usr/bin/env bash

if [[ "${USERNAME}" == "" ]] || [[ "${GITHUB_ACCESS_TOKEN}" == "" ]]; then
    echo "You must have set a GitHub username & access token environment variable. Like export USERNAME=YOUR_USERNAME; export GITHUB_ACCESS_TOKEN=YOUR_ACCESS_TOKEN";
    exit 1
fi

output=$1
rm -f $output
DOCBRANCH=$2
header="Authorization: token ${GITHUB_ACCESS_TOKEN}"
# Get total number of repository pages in fledge org.
fledgeRepoPagesCount=$(curl -sI https://api.github.com/orgs/fledge-iot/repos | grep -oP '\d+(?=>; rel="last")')
fledgeRepos=$(curl -H "$header" -sX GET https://api.github.com/orgs/fledge-iot/repos\?page=[1-$fledgeRepoPagesCount])
fledgeRepos="$(echo $fledgeRepos | sed 's/\] \[/,/g')"
fetchTopicReposPyScript='
import json,sys;\
repos=json.load(sys.stdin);\
fRepos = [r["name"] for r in repos["items"]];\
print("\n".join(fRepos));
'
fledge_wip_repos=$(curl -sX GET -H "$header" -H "Accept: application/vnd.github.mercy-preview+json" https://api.github.com/search/repositories?q=topic:wip+org:fledge-iot)
fledge_poc_repos=$(curl -sX GET -H "$header" -H "Accept: application/vnd.github.mercy-preview+json" https://api.github.com/search/repositories?q=topic:poc+org:fledge-iot)
fledge_internal_repos=$(curl -sX GET -H "$header" -H "Accept: application/vnd.github.mercy-preview+json" https://api.github.com/search/repositories?q=topic:internal+org:fledge-iot)
fledge_obsolete_repos=$(curl -sX GET -H "$header" -H "Accept: application/vnd.github.mercy-preview+json" https://api.github.com/search/repositories?q=topic:obsolete+org:fledge-iot)
fledge_wip_repos_name=$(echo ${fledge_wip_repos} | python3 -c "$fetchTopicReposPyScript" | sort -f)
fledge_poc_repos_name=$(echo ${fledge_poc_repos} | python3 -c "$fetchTopicReposPyScript" | sort -f)
fledge_internal_repos_name=$(echo ${fledge_internal_repos} | python3 -c "$fetchTopicReposPyScript" | sort -f)
fledge_obsolete_repos_name=$(echo ${fledge_obsolete_repos} | python3 -c "$fetchTopicReposPyScript" | sort -f)
export EXCLUDE_FLEDGE_TOPIC_REPOSITORIES=$(echo ${fledge_wip_repos_name} ${fledge_poc_repos_name} ${fledge_internal_repos_name} ${fledge_obsolete_repos_name} | sort -f)
echo "EXCLUDED FLEDGE TOPIC REPOS LIST: $EXCLUDE_FLEDGE_TOPIC_REPOSITORIES"
fetchFledgeReposPyScript='
import os,json,sys;\
repos=json.load(sys.stdin);\
exclude_topic_packages=os.environ["EXCLUDE_FLEDGE_TOPIC_REPOSITORIES"];\
all_repos = [r["name"] for r in repos if r["archived"] is False];\
fRepos = list(set(all_repos) - set(exclude_topic_packages.split()));\
print("\n".join(fRepos));
'
REPOS=$(echo ${fledgeRepos} | python3 -c "$fetchFledgeReposPyScript" | sort -f)
INBUILT_PLUGINS="fledge-north-OMF fledge-rule-Threshold fledge-rule-DataAvailability"
REPOSITORIES=$(echo ${REPOS} ${INBUILT_PLUGINS} | xargs -n1 | sort -f | xargs)
echo "REPOSITORIES LIST: "${REPOSITORIES}

function table {
    list="$1"
    title=$2
    tableType=$3
    echo ".. list-table:: ${title}" >> "$output"
    echo "    :widths: 20 50" >> "$output"
    echo "    :header-rows: 1" >> "$output"
    echo "" >> "$output"
    echo "    * - Name" >> "$output"
    echo "      - Description" >> "$output"
    for repo in ${list}
    do
        type=$(echo "${repo}" | sed -e 's/fledge-//' -e 's/-.*//')
        name=$(echo "${repo}" | sed -e 's/fledge-//' -e "s/${type}-//")
        if [[ ${type} = "$tableType" ]]; then
            if grep -q "$repo" <<< "$INBUILT_PLUGINS"; then
                if [[ $repo == "fledge-north-OMF" ]]; then
                    echo "    * - \`omf <"plugins/fledge-north-OMF/index.html">\`__" >> "$output"
                    echo "      - Send data to OSIsoft PI Server, Edge Data Store or OSIsoft Cloud Services" >> "$output"
                elif [[ $repo == "fledge-rule-DataAvailability" ]]; then
                    echo "    * - \`data-availability <"plugins/fledge-rule-DataAvailability/index.html">\`__" >> "$output"
                    echo "      - Triggers every time when it receives data that matches an asset code or audit code those given in the configuration" >> "$output"
                elif [[ $repo == "fledge-rule-Threshold" ]]; then
                    echo "    * - \`threshold <"plugins/fledge-rule-Threshold/index.html">\`__" >> "$output"
                    echo "      - Detect the value of a data point within an asset going above or below a set threshold" >> "$output"
                fi
                else
                    rm -rf ${repo}
                    git clone https://${USERNAME}:${GITHUB_ACCESS_TOKEN}@github.com/fledge-iot/${repo}.git --branch ${DOCBRANCH} >/dev/null 2>&1
                    is_branch_exists=$?
                    if [[ ${is_branch_exists} -eq 0 ]]; then
                        description=$(echo "$fledgeRepos" | python3 -c 'import json,sys;repos=json.load(sys.stdin);fRepo = [r for r in repos if r["name"] == "'"${repo}"'" ];print(fRepo[0]["description"])')
                        if [[ "${description}" = "None" ]]; then description="A ${name} ${type} plugin"; fi
                        # cloned directory replaced with installed directory name which is defined in Package file for each repo
                        installed_plugin_dir_name=$(cat ${repo}/Package | grep plugin_install_dirname= | sed -e "s/plugin_install_dirname=//g")
                        if [[ $installed_plugin_dir_name == "\${plugin_name}" ]]; then
                            installed_plugin_dir_name=$(cat ${repo}/Package | grep plugin_name= | sed -e "s/plugin_name=//g")
                        fi
                        old_plugin_name=$(echo ${repo} | cut -d '-' -f3-)
                        new_plugin_name=$(echo ${repo/$old_plugin_name/$installed_plugin_dir_name})
                        # Only link when doc exists in plugins directory
                        if [[ -d ${repo}/docs && -f ${repo}/docs/index.rst ]]; then
                            echo "    * - \`$name <"plugins/$new_plugin_name/index.html">\`__" >> "$output"
                        else
                            echo "    * - ${name}" >> "$output"
                        fi
                        echo "      - ${description}" >> "$output"
                    fi
                    rm -rf ${repo}
            fi
        fi
    done
}

cat >> $output << EOF1
Fledge Plugins
==============

The following set of plugins are available for Fledge. These plugins
extend the functionality by adding new sources of data, new destinations,
processing filters that can enhance or modify the data, rules for
notification delivery and notification delivery mechanisms.

EOF1
cat >>$output << EOF2
South Plugins
-------------

South plugins add new ways to get data into Fledge, a number of south
plugins are available ready built or users may add new south plugins of
their own by writing them in Python or C/C++.

EOF2
table "$REPOSITORIES" "Fledge South Plugins" south
cat >>$output << EOF3

North Plugins
-------------

North plugins add new destinations to which data may be sent by Fledge. A
number of north plugins are available ready built or users may add new
north plugins of their own by writing them in Python or C/C++.

EOF3
table "$REPOSITORIES" "Fledge North Plugins" north
cat >>$output << EOF4

Filter Plugins
--------------

Filter plugins add new ways in which data may be modified, enhanced
or cleaned as part of the ingress via a south service or egress to a
destination system. A number of north plugins are available ready built
or users may add new north plugins of their own by writing them in Python
or C/C++.

It is also possible, using particular filters, to supply expressions
or script snippets that can operate on the data as well. This provides a
simple way to process the data in Fledge as it is read from devices or
written to destination systems.

EOF4
table "$REPOSITORIES" "Fledge Filter Plugins" filter
cat >>$output << EOF5

Notification Rule Plugins
-------------------------

Notification rule plugins provide the logic that is used by the
notification service to determine if a condition has been met that should
trigger or clear that condition and hence send a notification. A number of
notification plugins are available as standard, however as with any plugin the
user is able to write new plugins in Python or C/C++ to extend the set of
notification rules.

EOF5
table "$REPOSITORIES" "Fledge Notification Rule Plugins" rule
cat >>$output << EOF6

Notification Delivery Plugins
-----------------------------

Notification delivery plugins provide the mechanisms to deliver the
notification messages to the systems that will receive them.  A number
of notification delivery plugins are available as standard, however as
with any plugin the user is able to write new plugins in Python or C/C++
to extend the set of notification deliveries.

EOF6
table "$REPOSITORIES" "Fledge Notification Delivery Plugins" notify
