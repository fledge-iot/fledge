.. Writing and Using Plugins describes how to implement a plugin for Fledge and how to use it
.. https://docs.google.com/document/d/1IKGXLWbyN6a7vx8UO3uDbq5Df0VvE4oCQIULgZVZbjM

.. |br| raw:: html

.. Links
.. |these INSTALLATION| raw:: html

   <a href="../04_installation.html">these</a>

.. |Getting Started| raw:: html

   <a href="../03_getting_started.html#building-fledge">here</a>

.. Links in new tabs

.. |fledge DHT| raw:: html

   <a href="https://github.com/fledge-iot/fledge-south-dht" target="_blank">https://github.com/fledge-iot/fledge-south-dht</a>
   <br />



A South Plugin Example In C/C++: the DHT11 Sensor
-------------------------------------------------

Using the same example as before, the DHT11 temperature and humidity sensor, let's look at how to create the plugin in C/C++.

The Software
~~~~~~~~~~~~

For this plugin we use the wiringpi C library to connect to the hardware of the Raspberry Pi

.. code-block:: console
 
  $ sudo apt-get install wiringpi
  Reading package lists... Done
  Building dependency tree
  Reading state information... Done
  The following NEW packages will be installed:
  wiringpi
  ...
  $


The Plugin
~~~~~~~~~~

This is the code for the plugin.cpp file that provides the plugin API:

.. code-block:: C

  /*
   * Fledge south plugin.
   *
   * Copyright (c) 2018 OSisoft, LLC
   *
   * Released under the Apache 2.0 Licence
   *
   * Author: Amandeep Singh Arora
   */
  #include <dht11.h>
  #include <plugin_api.h>
  #include <stdio.h>
  #include <stdlib.h>
  #include <strings.h>
  #include <string>
  #include <logger.h>
  #include <plugin_exception.h>
  #include <config_category.h>
  #include <rapidjson/document.h>
  #include <version.h>

  using namespace std;
  #define PLUGIN_NAME "dht11_V2"

  /**
   * Default configuration
   */
  const static char *default_config = QUOTE({
                  "plugin" : { 
                          "description" : "DHT11 C south plugin",
                          "type" : "string",
                          "default" : PLUGIN_NAME,
                          "readonly": "true"
                          },
                  "asset" : {
                          "description" : "Asset name",
                          "type" : "string",
                          "default" : "dht11",
                          "order": "1",
                          "displayName": "Asset Name",
                          "mandatory" : "true"
                          },
                  "pin" : {
                          "description" : "Rpi pin to which DHT11 is attached",
                          "type" : "integer",
                          "default" : "7",
                          "displayName": "Rpi Pin"
                          }
                  });


  /**
   * The DHT11 plugin interface
   */
  extern "C" {

  /**
   * The plugin information structure
   */
  static PLUGIN_INFORMATION info = {
          PLUGIN_NAME,              // Name
          VERSION,                  // Version
          0,                        // Flags
          PLUGIN_TYPE_SOUTH,        // Type
          "1.0.0",                  // Interface version
          default_config            // Default configuration
  };

  /**
   * Return the information about this plugin
   */
  PLUGIN_INFORMATION *plugin_info()
  {
          return &info;
  }

  /**
   * Initialise the plugin, called to get the plugin handle
   */
  PLUGIN_HANDLE plugin_init(ConfigCategory *config)
  {
          unsigned int pin;

          if (config->itemExists("pin"))
          {
                  pin = stoul(config->getValue("pin"), nullptr, 0);
          }

          DHT11 *dht11= new DHT11(pin);

          if (config->itemExists("asset"))
                  dht11->setAssetName(config->getValue("asset"));
          else
                  dht11->setAssetName("dht11");

          Logger::getLogger()->info("m_assetName set to %s", dht11->getAssetName());

          return (PLUGIN_HANDLE)dht11;
  }

  /**
   * Poll for a plugin reading
   */
  Reading plugin_poll(PLUGIN_HANDLE *handle)
  {
          DHT11 *dht11 = (DHT11*)handle;
          return dht11->takeReading();
  }

  /**
   * Reconfigure the plugin
   */
  void plugin_reconfigure(PLUGIN_HANDLE *handle, string& newConfig)
  {
  ConfigCategory	conf("dht", newConfig);
  DHT11 *dht11 = (DHT11*)*handle;

          if (conf.itemExists("asset"))
                  dht11->setAssetName(conf.getValue("asset"));
          if (conf.itemExists("pin"))
          {
                  unsigned int pin = stoul(conf.getValue("pin"), nullptr, 0);
                  dht11->setPin(pin);
          }
  }

  /**
   * Shutdown the plugin
   */
  void plugin_shutdown(PLUGIN_HANDLE *handle)
  {
          DHT11 *dht11 = (DHT11*)handle;
          delete dht11;
  }
  };

The full source code, including the *DHT11* class can be found in GitHub |fledge DHT|

Building Fledge and Adding the Plugin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you have not built Fledge yet, follow the steps described |Getting Started|. After the build, you can optionally install Fledge following |these INSTALLATION| steps.


- Clone the *fledge-south-dht* repository

.. code-block:: console

  $ git clone https://github.com/fledge-iot/fledge-south-dht.git
  ...
  $

- Set the environment variable FLEDGE_ROOT to the directory in which you built Fledge

.. code-block:: console

  $ export FLEDGE_ROOT=~/fledge
  $

- Go to the location in which you cloned the fledge-south-dht repository and create a build directory and run cmake in that directory

.. code-block:: console

  $ cd ~/fledge-south-dht
  $ mkdir build
  $ cd build
  $ cmake ..
  ...
  $

- Now make the plugin

.. code-block:: console

  $ make
  $

- If you have started Fledge from the build directory, copy the plugin into the destination directory

.. code-block:: console

  $ mkdir -p $FLEDGE_ROOT/plugins/south/dht
  $ cp libdht.so $FLEDGE_ROOT/plugins/south/dht
  $

- If you have installed Fledge by executing ``sudo make install``, copy the plugin into the destination directory

.. code-block:: console

  $ sudo mkdir -p /usr/local/fledge/plugins/south/dht
  $ sudo cp libdht.so /usr/local/fledge/plugins/south/dht
  $

.. note:: If you have installed Fledge using an alternative *DESTDIR*, remember to add the path to the destination directory to the ``cp`` command.


- Add service

.. code-block:: console

   $ curl -sX POST http://localhost:8081/fledge/service -d '{"name": "dht", "type": "south", "plugin": "dht", "enabled": true}'

You may now use the C/C++ plugin in exactly the same way as you used a Python plugin earlier.
