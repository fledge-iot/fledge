#!/usr/bin/env bash

./check_env
[[ $? -eq 0 ]]  || exit 1

CPFX="\033["
CINFO="${CPFX}1;32m"
CERR="${CPFX}1;31m"
CRESET="${CPFX}0m"

# Read config file
. ./test.config

rm -f err.txt
touch err.txt

display_and_collect_err () {
   echo -e "${CERR} $1 ${CRESET}"
   echo $1 >> err.txt
}


URL="http://$FLEDGE_IP:8081/fledge"

echo -e INFO: "${CINFO} Add Sinusoid South ${CRESET}"
curl -sX POST "$URL/service" -d \
'{
   "name": "Sine",
   "type": "south",
   "plugin": "sinusoid",
   "enabled": true,
   "config": {}
}'
echo

for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/south"`
    # echo ${RESULT}
    COUNT=`echo ${RESULT} | jq '.services[].assets[]|select(.asset == "sinusoid").count // empty'`
    if [[ -n "${COUNT}" ]] && [[ ${COUNT} -gt 0 ]]; then break; fi
done
if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
 then
   display_and_collect_err "TIMEOUT! sinusoid data not seen in South tab. $URL/south"
   if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
 else
   echo "---- sinusoid data seen in South tab ----"
fi

for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/asset"`
    # echo ${RESULT}
    COUNT=`echo ${RESULT} | jq '.[]|select(.assetCode == "sinusoid")|.count // empty'`
    if [[ -n "$COUNT" ]] && [[ ${COUNT} -gt 0 ]]; then break; fi
done
if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
 then
   display_and_collect_err "TIMEOUT! sinusoid data not seen in Asset tab. $URL/asset"
   if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
 else
  echo "---- sinusoid data seen in Asset tab ----"
fi

for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/ping"`
    # echo ${RESULT}
    READ=`echo ${RESULT} | jq '.dataRead // empty'`
    if [[ -n "$READ" ]] && [[ "$READ" -gt 0 ]]; then break; fi
done
if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
 then
   display_and_collect_err "TIMEOUT! sinusoid data not seen in ping header. $URL/ping"
   if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
 else
   echo "---- sinusoid data seen in ping header ----"
fi

for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/asset/sinusoid?seconds=600"`
    # echo ${RESULT}
    POINT=`echo ${RESULT} | jq '.[0].reading.sinusoid // empty'`
    if [[ -n "$POINT" ]]; then break; fi
done
if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
  then
    display_and_collect_err "TIMEOUT! sinusoid data not seen in sinusoid graph. $URL/asset/sinusoid?seconds=600"
    if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
  else
    echo "---- sinusoid data seen in sinusoid graph ----"
fi

echo "======================= SINUSOID SETUP COMPLETE ======================="

setup_north_pi_egress () {
    # Add PI North
    curl -sX POST "$URL/scheduled/task" -d \
    '{
       "name": "PI Server",
       "plugin": "OMF",
       "type": "north",
       "schedule_repeat": 30,
       "schedule_type": "3",
       "schedule_enabled": true,
       "config": {
          "ServerHostname": {
             "value": "'${PI_IP}'"
          },
          "ServerPort": {
             "value": "5460"
          },
          "producerToken": {
             "value": "'${PI_TOKEN}'"
          },
          "compression": {
             "value": "false"
          }
       }
    }'
    echo

    for LOOP in $(seq ${MAX_RETRIES}); do
        RESULT=`curl -sX GET "$URL/north"`
        # echo ${RESULT}
        SENT=`echo ${RESULT} | jq '.[0].sent // empty'`
        if [[ -n "$SENT" ]] && [[ "$SENT" -gt 0 ]]; then break; fi
    done
    if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
     then
       display_and_collect_err "TIMEOUT! PI data sent not seen in North tab. $URL/north"
       if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
     else
       echo "---- PI data sent seen in North tab ----"
    fi

    for LOOP in $(seq ${MAX_RETRIES}); do
        RESULT=`curl -sX GET "$URL/ping"`
        # echo ${RESULT}
        SENT=`echo ${RESULT} | jq '.dataSent // empty'`
        if [[ -n "$SENT" ]] && [[ "$SENT" -gt 0 ]]; then break; fi
    done
    if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
     then
       display_and_collect_err "TIMEOUT! PI data sent not seen in ping header. $URL/ping"
       if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
     else
       echo "---- PI data sent seen in ping header ----"
    fi

    for LOOP in $(seq ${MAX_RETRIES}); do
        RESULT=`curl -sX GET "$URL/statistics/history?minutes=10"`
        # echo ${RESULT}
        POINT=`echo ${RESULT} | jq '.statistics[0]."PI Server" // empty'`
        if [[ -n "$POINT" ]] && [[ "$POINT" -gt 0 ]]; then break; fi
    done
    if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
     then
       display_and_collect_err "TIMEOUT! PI data sent not seen in sent graph. $URL/statistics/history?minutes=10"
       if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
     else
       echo "---- PI data sent seen in sent graph ----"
    fi

   echo "======================= PI SETUP COMPLETE ======================="

}

if [[  ${VERIFY_EGRESS_TO_PI} == 1 ]]
  then
     setup_north_pi_egress
  else
     echo "======================= SKIPPED PI EGRESS ======================="
fi




# Add Expression Filter (Square)
curl -sX POST "$URL/filter" -d \
'{
   "name": "Square",
   "plugin": "expression",
   "filter_config": {
      "name": "square",
      "expression": "if(sinusoid>0,0.5,-0.5)",
      "enable": "true"
   }
}'
echo
# Apply Square to Sine
curl -sX PUT "$URL/filter/Sine/pipeline?allow_duplicates=true&append_filter=true" -d \
'{
   "pipeline": [
      "Square"
   ]
}'
echo
echo "======================= SINUSOID SQUARE FILTER COMPLETE ======================="
# Add Expression Filter (Max)
curl -sX POST "$URL/filter" -d \
'{
   "name": "Max",
   "plugin": "expression",
   "filter_config": {
      "name": "max",
      "expression": "max(sinusoid, square)",
      "enable": "true"
   }
}'
echo
# Apply Max to Sine
curl -sX PUT "$URL/filter/Sine/pipeline?allow_duplicates=true&append_filter=true" -d \
'{
   "pipeline": [
      "Max"
   ]
}'
echo

for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/asset/sinusoid?seconds=600"`
    # echo ${RESULT}
    SQUARE=`echo ${RESULT} | jq '.[0].reading.square // empty'`
    MAX=`echo ${RESULT} | jq '.[0].reading.max // empty'`
    if [[ -n "$SQUARE" ]] && [[ -n "$MAX" ]]; then break; fi
done
if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
 then
   display_and_collect_err "TIMEOUT! square and max data not seen in sinusoid graph. $URL/asset/sinusoid?seconds=600"
   if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
 else
   echo "---- square and max data seen in sinusoid graph ----"
fi

echo "======================= SINUSOID MAX FILTER COMPLETE ======================="


# Add Randomwalk South
curl -sX POST "$URL/service" -d \
'{
   "name": "Random",
   "type": "south",
   "plugin": "randomwalk",
   "enabled": true,
   "config": {}
}'
echo
# need to wait for Fledge to be ready to accept python file
sleep ${SLEEP_FIX}
# Add Python35 Filter (ema)
curl -sX POST "$URL/filter" -d \
'{
   "name": "Ema",
   "plugin": "python35",
   "filter_config": {
      "config": {
         "rate": 0.07
      },
      "enable": "true"
   }
}'
echo
# Apply Ema to Random
curl -sX PUT "$URL/filter/Random/pipeline?allow_duplicates=true&append_filter=true" -d \
'{
   "pipeline": [
      "Ema"
   ]
}'
echo
# Upload Ema python script
curl -sX POST "$URL/category/Random_Ema/script/upload" -F "script=@scripts/ema.py"
echo

for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/asset/randomwalk?seconds=600"`
    # echo ${RESULT}
    RANDOM_RESULT=`echo ${RESULT} | jq '.[0].reading.randomwalk // empty'`
    EMA=`echo ${RESULT} | jq '.[0].reading.ema // empty'`
    if [[ -n "$RANDOM_RESULT" ]] && [[ -n "$EMA" ]]; then break; fi
done
if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
 then
   display_and_collect_err "TIMEOUT! randomwalk and ema data not seen in randomwalk graph. $URL/asset/randomwalk?seconds=600"
   if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
 else
   echo "---- randomwalk and ema data seen in randomwalk graph ----"
fi

# DELETE Randomwalk South
DEL_RAND=`curl -sX DELETE "$URL/service/Random"`
#echo "$DEL_RAND"
RESULT_DEL_RAND=`echo ${DEL_RAND} | jq '.result // empty'`
if [[ -n "$RESULT_DEL_RAND" ]];
  then
    echo "$RESULT_DEL_RAND"
 else
   display_and_collect_err "ERROR! Failed to delete randomwalk service"
   if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
fi
echo "======================= RANDOMWALK SETUP COMPLETE ======================="


echo "Add Randomwalk south service again ..."
curl -sX POST "$URL/service" -d \
'{
   "name": "Random1",
   "type": "south",
   "plugin": "randomwalk",
   "enabled": true,
   "config": {"assetName": {"value": "randomwalk1"}}
}'
echo

# need to wait for Fledge to be ready to accept python file
sleep ${SLEEP_FIX}

# Add Python35 Filter (PF)
curl -sX POST "$URL/filter" -d \
'{
   "name": "PF",
   "plugin": "python35",
   "filter_config": {
      "config": {
         "rate": 0.07
      },
      "enable": "true"
   }
}'
echo

# Apply PF to Random
curl -sX PUT "$URL/filter/Random1/pipeline?allow_duplicates=true&append_filter=true" -d \
'{
   "pipeline": [
      "PF"
   ]
}'
echo

echo "upload trendc script..."
curl -sX POST "$URL/category/Random1_PF/script/upload" -F "script=@scripts/trendc.py"
echo

for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/asset/randomwalk1?seconds=60"`
    # echo ${RESULT}
    RANDOM_RESULT=`echo ${RESULT} | jq '.[0].reading.randomwalk // empty'`
    TRENDC=`echo ${RESULT} | jq '.[0].reading.ema_long // empty'`
    if [[ -n "$RANDOM_RESULT" ]] && [[ -n "$TRENDC" ]]; then break; fi
done
if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
 then
   display_and_collect_err "TIMEOUT! randomwalk1 and ema_long data not seen in randomwalk1 graph. $URL/asset/randomwalk1?seconds=60"
   if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
 else
   echo "---- randomwalk and ema_long data seen in randomwalk1 graph ----"
fi

echo "upload trendc script with modified content..."

cp scripts/trendc.py scripts/trendc.py.bak
sed -i "s/reading\[b'ema_long/reading\[b'ema_longX/g" scripts/trendc.py

curl -sX POST "$URL/category/Random1_PF/script/upload" -F "script=@scripts/trendc.py"
echo

for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/asset/randomwalk1?seconds=60"`
    # echo ${RESULT}
    RANDOM_RESULT=`echo ${RESULT} | jq '.[0].reading.randomwalk // empty'`
    TRENDCX=`echo ${RESULT} | jq '.[0].reading.ema_longX // empty'`
    if [[ -n "$RANDOM_RESULT" ]] && [[ -n "$TRENDCX" ]]; then break; fi
done
if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
 then
   display_and_collect_err "TIMEOUT! randomwalk1 and ema_longX data not seen in randomwalk1 graph. $URL/asset/randomwalk1?seconds=60"
   if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
 else
   echo "---- randomwalk and ema_longX data seen in randomwalk1 graph ----"
fi


mv scripts/trendc.py.bak scripts/trendc.py


echo "upload ema script..."
curl -sX POST "$URL/category/Random1_PF/script/upload" -F "script=@scripts/ema.py"
echo

for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/asset/randomwalk1?seconds=60"`
    # echo ${RESULT}
    RANDOM_RESULT=`echo ${RESULT} | jq '.[0].reading.randomwalk // empty'`
    EMA=`echo ${RESULT} | jq '.[0].reading.ema // empty'`
    if [[ -n "$RANDOM_RESULT" ]] && [[ -n "$EMA" ]]; then break; fi
done
if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
 then
   display_and_collect_err "TIMEOUT! randomwalk1 and ema data not seen in randomwalk1 graph. $URL/asset/randomwalk1?seconds=60"
   if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
 else
   echo "---- randomwalk1 and ema data seen in randomwalk1 graph ----"
fi

echo "======================= RANDOMWALK SETUP 2 COMPLETE ======================="


# Add Enviro-pHAT South
curl -sX POST "$URL/service" -d \
'{
   "name": "Enviro",
   "type": "south",
   "plugin": "envirophat",
   "enabled": true,
   "config": {
      "assetNamePrefix": {
         "value": "e_"
      }
   }
}'
echo
# Add Expression Filter (Fahrenheit)
curl -sX POST "$URL/filter" -d \
'{
   "name": "Fahrenheit",
   "plugin": "expression",
   "filter_config": {
      "name": "temp_fahr",
      "expression": "temperature*1.8+32",
      "enable": "true"
   }
}'
echo
# Apply Fahrenheit to Enviro
curl -sX PUT "$URL/filter/Enviro/pipeline?allow_duplicates=true&append_filter=true" -d \
'{
   "pipeline": [
      "Fahrenheit"
   ]
}'
echo

for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/asset/e_weather?seconds=600"`
    echo ${RESULT}
    TEMP=`echo ${RESULT} | jq '.[0].reading.temperature // empty'`
    FAHR=`echo ${RESULT} | jq '.[0].reading.temp_fahr // empty'`
    if [[ -n "$TEMP" ]] && [[ -n "$FAHR" ]]; then break; fi
done

if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
 then
   display_and_collect_err "TIMEOUT! temperature and fahrenheit data not seen in e_weather graph. $URL/asset/e_weather?seconds=600"
   if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
 else
   echo "---- temperature and fahrenheit data seen in e_weather graph ----"
fi

echo "======================= enviro-pHAT SETUP COMPLETE ======================="


# Enable Event Engine
curl -sX POST "$URL/service" -d \
'{
   "name": "Fledge Notifications",
   "type": "notification",
   "enabled": true
}'
echo
# Need to wait for event engine to come up
curl -sX GET "$URL/service" | jq '.services[]|select(.name=="Fledge Notifications").status'
for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/service"`
    echo ${RESULT}
    STATUS=`echo ${RESULT} | jq '.services[]|select(.name=="Fledge Notifications").status // empty'`
    if [[ -n "$STATUS" ]] && [[ ${STATUS} == "\"running\"" ]]; then break; fi
done

if [[ ${LOOP} -eq ${MAX_RETRIES} ]]
 then
   display_and_collect_err "TIMEOUT! event engine is not running. $URL/service"
   if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
 else
   echo "---- service reports event engine is running ----"
fi
# sleep ${SLEEP_FIX}

echo "======================= EVENT ENGINE ENABLED ======================="


# Add Notification with Threshold Rule and Asset Notification (Positive Sine)
curl -sX POST "$URL/notification" -d \
'{
   "name": "Positive Sine",
   "description": "Positive Sine notification instance",
   "rule": "Threshold",
   "channel": "asset",
   "notification_type": "retriggered",
   "enabled": true
}'
echo
# Set Positive Sine Rule Config (sinusoid.sinusoid > 0)
curl -sX PUT "$URL/category/rulePositive%20Sine" -d \
'{
   "asset": "sinusoid",
   "datapoint": "sinusoid"
}'
echo
# Set Positive Sine Delivery Config (positive_sine: "positive")
curl -sX PUT "$URL/category/deliveryPositive%20Sine" -d \
'{
   "asset": "positive_sine",
   "description": "positive",
   "enable": "true"
}'
echo

for LOOP in $(seq ${MAX_RETRIES}); do
    RESULT=`curl -sX GET "$URL/asset/positive_sine?seconds=600"`
    echo ${RESULT}
    EVENT=`echo ${RESULT} | jq '.[0].reading.event // empty'`
    RULE=`echo ${RESULT} | jq '.[0].reading.rule // empty'`
    if [[ -n "$EVENT" ]] && [[ "$EVENT" == "\"triggered\"" ]] && \
        [[ -n "$RULE" ]] && [[ "$RULE" == "\"Positive Sine\"" ]]; then break; fi
    sleep 1
done

if [[ ${LOOP} -eq ${MAX_RETRIES} ]];
  then
    display_and_collect_err "TIMEOUT! positive_sine event not fired. $URL/asset/positive_sine?seconds=600";
    if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
  else
    echo "---- positive_sine event fired ----"
fi

# [{"reading": {"description": "Notification alert", "event": "triggered", "rule": "Positive Sign"}, "timestamp": "2019-08-28 17:42:42.421744"}, {"reading": {"description": "Notification alert", "event": "triggered", "rule": "Positive Sign"}, "timestamp": "2019-08-28 17:41:37.002845"}, {"reading": {"description": "Notification alert", "event": "triggered", "rule": "Positive Sign"}, "timestamp": "2019-08-28 17:40:33.489106"}]

echo "======================= EVENT POSITIVE SINE COMPLETE ======================="

rm -f /tmp/out
curl -sX POST "$URL/notification" -d \
'{
   "name": "Negative Sine",
   "description": "Negative Sine notification instance",
   "rule": "Threshold",
   "channel": "python35",
   "notification_type": "retriggered",
   "enabled": true
}'

# Upload Python Script (write_out.py)
curl  -sX POST "$URL/category/deliveryNegative%20Sine/script/upload" -F "script=@scripts/write_out.py"
echo

# Set Negative Sine Rule Config (sinusoid.sinusoid < 0)
curl -sX PUT "$URL/category/ruleNegative%20Sine" -d \
'{
   "asset": "sinusoid",
   "datapoint": "sinusoid",
   "condition": "<"
}'
echo


# Set Negative Sine Delivery Config (enabled)
curl -sX PUT "$URL/category/deliveryNegative%20Sine" -d \
'{
   "enable": "true"
}'
echo

for LOOP in $(seq ${MAX_RETRIES}); do
    if [[ -f "/tmp/out" ]]; then break; fi
    sleep 1
done
if [[ ${LOOP} -eq ${MAX_RETRIES} ]];
  then
    display_and_collect_err "TIMEOUT! negative_sine event not fired. No /tmp/out file.";
    if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
  else
    echo "---- negative_sine event fired ----"
fi

echo "======================= EVENT NEGATIVE SINE COMPLETE ======================="


event_toggled_sent_clear () {
    echo "Add sinusoid"
    ADD_SIN_RES=`curl -sX POST "$URL/service" -d '{"name": "sin #1", "plugin": "sinusoid", "type": "south", "enabled":true}'`
    ID=`echo ${ADD_SIN_RES} | jq '.id // empty'`
    NAME=`echo ${ADD_SIN_RES} | jq '.name // empty'`
    echo "$ADD_SIN_RES"
    if [[ -n "$ID" ]]  || [[ -n "$NAME" ]];
      then
        echo
      else
        display_and_collect_err "ERROR! Failed to add sin #1"
        if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
    fi

#    echo "Add and enable Notification"
#    curl -sX POST "$URL/service" -d '{"name":"Fledge Notifications","type":"notification","enabled":true}'

    echo "Create event instance with threshold and asset; with notification trigger type toggled"
    CREATE_EVENT_INSTANCE=`curl -sX POST "$URL/notification" -d '{"name":"test","description":"test notification instance","rule":"Threshold","channel":"asset","notification_type":"toggled","enabled":true}' | jq .`
    echo "$CREATE_EVENT_INSTANCE"

    for LOOP in $(seq ${MAX_RETRIES}); do
        RESULT=`curl -sX GET "$URL/notification"`
        echo ${RESULT}
        EVENT_NAME=`echo ${RESULT} | jq '.notifications[]|select(.name=="test").name'`
        RULE=`echo ${RESULT} | jq '.notifications[]|select(.name=="test").rule'`
        TYPE=`echo ${RESULT} | jq '.notifications[]|select(.name=="test").notificationType'`
        if [[ -n "$EVENT_NAME" ]] && [[ "$EVENT_NAME" == "\"test\"" ]] && \
        [[ -n "$RULE" ]] && [[ "$RULE" == "\"Threshold\"" ]] && \
        [[ -n "$TYPE" ]] && [[ "$TYPE" == "\"toggled\"" ]]; then break; fi
    done

    if [[ ${LOOP} -eq ${MAX_RETRIES} ]];
      then
        display_and_collect_err "TIMEOUT! event instance not created successfully . $URL/notification";
        if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
      else
        echo "---- event instance created successfully ----"
    fi

    echo "Set rule"
    SET_RULE=`curl -sX PUT "$URL/category/ruletest" -d '{"asset":"sinusoid", "datapoint":"sinusoid", "trigger_value": "0.8"}' | jq .`
    echo "$SET_RULE"

    for LOOP in $(seq ${MAX_RETRIES}); do
      RESULT=`curl -sX GET "$URL/category/ruletest"`
      echo ${RESULT}
      ASSET=`echo ${RESULT} | jq .asset.value`
      DATAPOINT=`echo ${RESULT} | jq .datapoint.value`
      TRIGGER_VALUE=` echo ${RESULT} | jq .trigger_value.value`
      if [[ -n "$ASSET" ]] && [[ "$ASSET" == "\"sinusoid\"" ]] &&\
      [[ -n "$DATAPOINT" ]] && [[ "$DATAPOINT" == "\"sinusoid\"" ]] &&\
      [[ -n "$TRIGGER_VALUE" ]] && [[ "$TRIGGER_VALUE" == "\"0.8\"" ]]; then break; fi
    done

    if [[ ${LOOP} -eq ${MAX_RETRIES} ]];
      then
        display_and_collect_err "TIMEOUT! Rule not  set successfully . $URL/category/ruletest";
        if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
      else
        echo "---- Rule set successfully ----"
    fi

    echo "Set delivery"
    SET_DELIVERY_CHN=`curl -sX PUT "$URL/category/deliverytest" -d '{"asset": "sin0.8", "description":"asset notification", "enable":"true"}' | jq .`
    echo "$SET_DELIVERY_CHN"

    for LOOP in $(seq ${MAX_RETRIES}); do
      RESULT=`curl -sX GET "$URL/category/deliverytest"`
      echo ${RESULT}
      ASSET=`echo ${RESULT} | jq .asset.value`
      ENABLE_VALUE=`echo ${RESULT} | jq .enable.value`
      if [[ -n "$ASSET" ]] && [[ "$ASSET" == "\"sin0.8\"" ]] &&\
      [[ -n "$ENABLE_VALUE" ]] && [[ "$ENABLE_VALUE" == "\"true\"" ]]; then break; fi
    done

    if [[ ${LOOP} -eq ${MAX_RETRIES} ]];
      then
        display_and_collect_err "TIMEOUT! Delivery channel not set successfully . $URL/category/deliverytest";
        if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
      else
        echo "---- Delivery channel set successfully ----"
    fi

    echo "Sleeping for 20 seconds until sin0.8 is added in asset table"
    sleep 20

    echo "Verify sin0.8 has been created"
    GET_ASSET=`curl -sX GET "$URL/asset/sin0.8?seconds=600" | jq .`
    echo "$GET_ASSET"
    for LOOP in $(seq ${MAX_RETRIES}); do
      RESULT=`curl -sX GET "$URL/asset/sin0.8?seconds=600"`
      echo ${RESULT}
      RULE=`echo ${RESULT} | jq '.[0].reading.rule // empty'`
      if [[ -n "$RESULT" ]] &&  [[ -n "$RULE" ]] && \
      [[ "$RULE" == "\"test\"" ]]; then break; fi
    done

    if [[ ${LOOP} -eq ${MAX_RETRIES} ]];
      then
        display_and_collect_err "TIMEOUT! sin0.8 has not been created. $URL/asset/sin0.8?seconds=600";
        if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
      else
        echo "---- sin0.8 has been created ----"
    fi


    echo "TODO: FOGL-3285 Verify sin0.8 asset tracker entry"
#   GET_ASSET_TRACKER=`curl -sX GET "$URL/track" | jq .` # May be ?asset=sin0.8
#   echo "$GET_ASSET_TRACKER"
#   for LOOP in $(seq ${MAX_RETRIES}); do
#        RESULT=`curl -sX GET "$URL/track"`
#        echo ${RESULT}
#        ASSET_NAME=`echo ${RESULT} | jq '.track[]|select(.asset=="sin0.8").asset'`
#        ASSET_CREATION_EVENT=`echo ${RESULT} | jq '.track[]|select(.asset=="sin0.8").event'`
#        ASSET_CREATED_BY=`echo ${RESULT} | jq '.track[]|select(.asset=="sin0.8").service'`
#        # verify ASSET_CREATION_EVENT event & ASSET_CREATED_BY service
#        if [[ -n "$ASSET_NAME" ]] && [[ "$ASSET_NAME" == "\"sin0.8\"" ]]; then break; fi
#    done
#
#    if [[ ${LOOP} -eq ${MAX_RETRIES} ]];
#      then
#        display_and_collect_err "TIMEOUT! sin0.8 entry not found in asset tracker. $URL/track";
#        if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
#      else
#        echo "---- sin0.8 entry found in asset tracker ----"
#    fi

    echo "When rule is triggred, There should be audit entries for NTFSN & NTFCL"

    for LOOP in $(seq ${MAX_RETRIES}); do
      RESULT=`curl -sX GET "$URL/audit?limit=1&source=NTFSN&severity=INFORMATION"`
      echo ${RESULT}
      AUDIT_NAME=`echo ${RESULT} | jq '.audit[].details.name'`
      SOURCE=`echo ${RESULT} | jq '.audit[].source'`
      if [[ -n "$AUDIT_NAME" ]] && [[ "$AUDIT_NAME" == "\"test\"" ]] && \
      [[ -n "$SOURCE" ]] && [[ "$SOURCE" == "\"NTFSN\"" ]]; then break; fi
      # added sleep of 1s as next event fot sin0.8 will trigger when sinusoid datapoint value will be 0.8 again
      # and with LIMIT 1 there will be entries for postive and negatives sine events from last test setup
      sleep 1
    done

    if [[ ${LOOP} -eq ${MAX_RETRIES} ]];
      then
        display_and_collect_err "TIMEOUT! entry for test not found in NTFSN. $URL/audit?limit=1&source=NTFSN&severity=INFORMATION";
        if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
      else
        echo "---- Found NTFSN entry for test ----"
    fi


    for LOOP in $(seq ${MAX_RETRIES}); do
        RESULT=`curl -sX GET "$URL/audit?limit=1&source=NTFCL&severity=INFORMATION"`
        echo ${RESULT}
        AUDIT_NAME=`echo ${RESULT} | jq '.audit[].details.name'`
        SOURCE=`echo ${RESULT} | jq '.audit[].source'`
        if [[ -n "$AUDIT_NAME" ]] && [[ "$AUDIT_NAME" == "\"test\"" ]] && \
        [[ -n "$SOURCE" ]] && [[ "$SOURCE" == "\"NTFCL\"" ]]; then break; fi
    done

    if [[ ${LOOP} -eq ${MAX_RETRIES} ]];
      then
        display_and_collect_err "TIMEOUT! entry for test not found in NTFCL. $URL/audit?limit=1&source=NTFCL&severity=INFORMATION";
        if [[ ${EXIT_EARLY} -eq 1 ]]; then exit 1; fi
      else
        echo "---- Found NTFCL entry for test ----"
    fi

}

event_toggled_sent_clear

echo "======================= TOGGLE EVENT NTFSN and NTFCL TEST COMPLETE ======================="


ERRORS="$(wc -c <"err.txt")"
if [[ ${ERRORS} -ne 0 ]]
 then
    echo "============================= TESTS FAILED! ============================="
    cat err.txt
    exit 1
 else
    echo "======================================================\
          =================== S U C C E S S ====================\
          ======================================================"
fi
echo

exit 0


#####
##### The Remainder are the actual rule instances used in the lab
##### These aren't included because they can't be automated easily
#####

GREEN_TRIGGER=130
TEMPERATURE_TRIGGER=31

# Add Notification with Threshold Rule and Asset Notification (Temperature Monitor)
curl -sX POST "$URL/notification" -d \
'{
   "name": "Temperature Monitor",
   "description": "Temperature Monitor notification instance",
   "rule": "Threshold",
   "channel": "asset",
   "notification_type": "toggled",
   "enabled": true
}'
echo
# Set Temperature Monitor Rule Config (e_weather.temperature > 31)
curl -sX PUT "$URL/category/ruleTemperature%20Monitor" -d \
'{
   "asset": "e_weather",
   "datapoint": "temperature",
   "trigger_value": "'${TEMPERATURE_TRIGGER}'"
}'
echo
# Set Temperature Monitor Delivery Config (temperature_monitor: "Too Hot!")
curl -sX PUT "$URL/category/deliveryTemperature%20Monitor" -d \
'{
   "asset": "temperature_monitor",
   "description": "Too Hot!",
   "enable": "true"
}'
echo
# Set Temperature Monitor config (retrigger_time: 5)
curl -sX PUT "$URL/category/Temperature%20Monitor" -d \
'{
   "retrigger_time": "5"
}'
echo
echo "======================= TEMPERATURE MONITOR SETUP COMPLETE ======================="

# Add Notification with Threshold Rule and Python35 Delivery (Flash on Green)
curl -sX POST "$URL/notification" -d \
'{
   "name": "Flash on Green",
   "description": "Flash on Green notification instance",
   "rule": "Threshold",
   "channel": "python35",
   "notification_type": "retriggered",
   "enabled": true
}'
echo
# Set Flash on Green Rule Config (e_rgb.g > 130)
curl -sX PUT "$URL/category/ruleFlash%20on%20Green" -d \
'{
   "asset": "e_rgb",
   "datapoint": "g",
   "trigger_value": "'${GREEN_TRIGGER}'"
}'
echo
# Set Flash on Green Delivery Config (enabled)
curl -sX PUT "$URL/category/deliveryFlash%20on%20Green" -d \
'{
   "enable": "true"
}'
echo
# Upload Flash on Green Python Script (flash_leds.py)
curl -sX POST "$URL/category/deliveryFlash%20on%20Green/script/upload" -F "script=@scripts/flash_leds.py"
echo
# Set Flash on Green config (retrigger_time: 5)
curl -sX PUT "$URL/category/Flash%20on%20Green" -d \
'{
   "retrigger_time": "5"
}'
echo
echo "======================= FLASH ON GREEN SETUP COMPLETE ======================="
